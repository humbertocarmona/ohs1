<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Oscilador Harm√¥nico Simples</title>
    <link rel="stylesheet"  type="text/css" href="library/css/ejss.css" />
    <script src="library/scripts/common_script.js"></script>
    <script src="library/scripts/textresizedetector.js"></script>
    <script src="library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function ohs1(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var mainWidth; // EjsS Model.Variables.display.mainWidth
  var centerWidth; // EjsS Model.Variables.display.centerWidth
  var middleHeight; // EjsS Model.Variables.display.middleHeight

  var xmin; // EjsS Model.Variables.Global.xmin
  var xmax; // EjsS Model.Variables.Global.xmax
  var ymin; // EjsS Model.Variables.Global.ymin
  var ymax; // EjsS Model.Variables.Global.ymax
  var Lx; // EjsS Model.Variables.Global.Lx
  var Ly; // EjsS Model.Variables.Global.Ly

  var t; // EjsS Model.Variables.main.t
  var dt; // EjsS Model.Variables.main.dt
  var v0; // EjsS Model.Variables.main.v0
  var x0; // EjsS Model.Variables.main.x0
  var x; // EjsS Model.Variables.main.x
  var y; // EjsS Model.Variables.main.y
  var vx; // EjsS Model.Variables.main.vx
  var vy; // EjsS Model.Variables.main.vy
  var ax; // EjsS Model.Variables.main.ax
  var ay; // EjsS Model.Variables.main.ay
  var v; // EjsS Model.Variables.main.v
  var a; // EjsS Model.Variables.main.a
  var Kin; // EjsS Model.Variables.main.Kin
  var Pot; // EjsS Model.Variables.main.Pot
  var Tot; // EjsS Model.Variables.main.Tot

  var k; // EjsS Model.Variables.Oscilador.k
  var m; // EjsS Model.Variables.Oscilador.m
  var w; // EjsS Model.Variables.Oscilador.w

  var view_a; // EjsS Model.Variables.viewFlags.view_a
  var view_r; // EjsS Model.Variables.viewFlags.view_r
  var view_x; // EjsS Model.Variables.viewFlags.view_x
  var view_y; // EjsS Model.Variables.viewFlags.view_y
  var view_ax; // EjsS Model.Variables.viewFlags.view_ax
  var view_vx; // EjsS Model.Variables.viewFlags.view_vx
  var view_end; // EjsS Model.Variables.viewFlags.view_end
  var view_Kin; // EjsS Model.Variables.viewFlags.view_Kin
  var view_Tot; // EjsS Model.Variables.viewFlags.view_Tot
  var view_Pot; // EjsS Model.Variables.viewFlags.view_Pot

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      mainWidth : mainWidth,
      centerWidth : centerWidth,
      middleHeight : middleHeight,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      Lx : Lx,
      Ly : Ly,
      t : t,
      dt : dt,
      v0 : v0,
      x0 : x0,
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      ax : ax,
      ay : ay,
      v : v,
      a : a,
      Kin : Kin,
      Pot : Pot,
      Tot : Tot,
      k : k,
      m : m,
      w : w,
      view_a : view_a,
      view_r : view_r,
      view_x : view_x,
      view_y : view_y,
      view_ax : view_ax,
      view_vx : view_vx,
      view_end : view_end,
      view_Kin : view_Kin,
      view_Tot : view_Tot,
      view_Pot : view_Pot
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      mainWidth : mainWidth,
      centerWidth : centerWidth,
      middleHeight : middleHeight,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      Lx : Lx,
      Ly : Ly,
      t : t,
      dt : dt,
      v0 : v0,
      x0 : x0,
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      ax : ax,
      ay : ay,
      v : v,
      a : a,
      Kin : Kin,
      Pot : Pot,
      Tot : Tot,
      k : k,
      m : m,
      w : w,
      view_a : view_a,
      view_r : view_r,
      view_x : view_x,
      view_y : view_y,
      view_ax : view_ax,
      view_vx : view_vx,
      view_end : view_end,
      view_Kin : view_Kin,
      view_Tot : view_Tot,
      view_Pot : view_Pot
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.mainWidth != "undefined") mainWidth = json.mainWidth;
    if(typeof json.centerWidth != "undefined") centerWidth = json.centerWidth;
    if(typeof json.middleHeight != "undefined") middleHeight = json.middleHeight;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.Lx != "undefined") Lx = json.Lx;
    if(typeof json.Ly != "undefined") Ly = json.Ly;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.v0 != "undefined") v0 = json.v0;
    if(typeof json.x0 != "undefined") x0 = json.x0;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.ax != "undefined") ax = json.ax;
    if(typeof json.ay != "undefined") ay = json.ay;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.Kin != "undefined") Kin = json.Kin;
    if(typeof json.Pot != "undefined") Pot = json.Pot;
    if(typeof json.Tot != "undefined") Tot = json.Tot;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.view_a != "undefined") view_a = json.view_a;
    if(typeof json.view_r != "undefined") view_r = json.view_r;
    if(typeof json.view_x != "undefined") view_x = json.view_x;
    if(typeof json.view_y != "undefined") view_y = json.view_y;
    if(typeof json.view_ax != "undefined") view_ax = json.view_ax;
    if(typeof json.view_vx != "undefined") view_vx = json.view_vx;
    if(typeof json.view_end != "undefined") view_end = json.view_end;
    if(typeof json.view_Kin != "undefined") view_Kin = json.view_Kin;
    if(typeof json.view_Tot != "undefined") view_Tot = json.view_Tot;
    if(typeof json.view_Pot != "undefined") view_Pot = json.view_Pot;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.mainWidth != "undefined") mainWidth = json.mainWidth;
    if(typeof json.centerWidth != "undefined") centerWidth = json.centerWidth;
    if(typeof json.middleHeight != "undefined") middleHeight = json.middleHeight;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.Lx != "undefined") Lx = json.Lx;
    if(typeof json.Ly != "undefined") Ly = json.Ly;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.v0 != "undefined") v0 = json.v0;
    if(typeof json.x0 != "undefined") x0 = json.x0;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.ax != "undefined") ax = json.ax;
    if(typeof json.ay != "undefined") ay = json.ay;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.Kin != "undefined") Kin = json.Kin;
    if(typeof json.Pot != "undefined") Pot = json.Pot;
    if(typeof json.Tot != "undefined") Tot = json.Tot;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.view_a != "undefined") view_a = json.view_a;
    if(typeof json.view_r != "undefined") view_r = json.view_r;
    if(typeof json.view_x != "undefined") view_x = json.view_x;
    if(typeof json.view_y != "undefined") view_y = json.view_y;
    if(typeof json.view_ax != "undefined") view_ax = json.view_ax;
    if(typeof json.view_vx != "undefined") view_vx = json.view_vx;
    if(typeof json.view_end != "undefined") view_end = json.view_end;
    if(typeof json.view_Kin != "undefined") view_Kin = json.view_Kin;
    if(typeof json.view_Tot != "undefined") view_Tot = json.view_Tot;
    if(typeof json.view_Pot != "undefined") view_Pot = json.view_Pot;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["ODES"] = true;
    __pagesEnabled["fixed"] = true;
  });

  _model.addToReset(function() {
    mainWidth = (_isMobile||_isEPub)?"400px":"600px"; // EjsS Model.Variables.display.mainWidth
    centerWidth = (_isMobile||_isEPub)?"300px":"500px"; // EjsS Model.Variables.display.centerWidth
    middleHeight = (_isMobile||_isEPub)?"350px":"400px"; // EjsS Model.Variables.display.middleHeight
  });

  _model.addToReset(function() {
    xmin = -10.0; // EjsS Model.Variables.Global.xmin
    xmax = -xmin; // EjsS Model.Variables.Global.xmax
    ymin = xmin; // EjsS Model.Variables.Global.ymin
    ymax = -xmin; // EjsS Model.Variables.Global.ymax
    Lx = xmax-xmin; // EjsS Model.Variables.Global.Lx
    Ly = ymax-ymin; // EjsS Model.Variables.Global.Ly
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.main.t
    dt = 0.001; // EjsS Model.Variables.main.dt
    v0 = 0.0; // EjsS Model.Variables.main.v0
    x0 = 0.0; // EjsS Model.Variables.main.x0
    x = x0; // EjsS Model.Variables.main.x
    y = 0; // EjsS Model.Variables.main.y
    vx = v0; // EjsS Model.Variables.main.vx
    vy = 0; // EjsS Model.Variables.main.vy
    ax = 0; // EjsS Model.Variables.main.ax
    ay = 0; // EjsS Model.Variables.main.ay
    v = 0; // EjsS Model.Variables.main.v
    a = 0; // EjsS Model.Variables.main.a
    Kin = 0; // EjsS Model.Variables.main.Kin
    Pot = 0; // EjsS Model.Variables.main.Pot
    Tot = 0; // EjsS Model.Variables.main.Tot
  });

  _model.addToReset(function() {
    k = 1; // EjsS Model.Variables.Oscilador.k
    m = 1; // EjsS Model.Variables.Oscilador.m
    w = Math.sqrt(k/m); // EjsS Model.Variables.Oscilador.w
  });

  _model.addToReset(function() {
    view_a = false; // EjsS Model.Variables.viewFlags.view_a
    view_r = true; // EjsS Model.Variables.viewFlags.view_r
    view_x = false; // EjsS Model.Variables.viewFlags.view_x
    view_y = false; // EjsS Model.Variables.viewFlags.view_y
    view_ax = false; // EjsS Model.Variables.viewFlags.view_ax
    view_vx = false; // EjsS Model.Variables.viewFlags.view_vx
    view_end = false; // EjsS Model.Variables.viewFlags.view_end
    view_Kin = false; // EjsS Model.Variables.viewFlags.view_Kin
    view_Tot = false; // EjsS Model.Variables.viewFlags.view_Tot
    view_Pot = false; // EjsS Model.Variables.viewFlags.view_Pot
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(200);
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    t = 0.0;  // > Initialization.Init Page:1
    vx = v0;  // > Initialization.Init Page:2
    Kin = 0.5*m*vx*vx;  // > Initialization.Init Page:3
    Pot = 0.5*k*x*x;  // > Initialization.Init Page:4
    Tot = Kin + Pot;  // > Initialization.Init Page:5
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["ODES"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["fixed"]) return;
    ax = -k*x/m;  // > FixedRelations.fixed:1
    Kin = 0.5*m*vx*vx;  // > FixedRelations.fixed:2
    Pot = 0.5*k*x*x;  // > FixedRelations.fixed:3
    Tot = Kin + Pot;  // > FixedRelations.fixed:4
    if(t>50) {  // > FixedRelations.fixed:5
      _pause();  // > FixedRelations.fixed:6
      view_end=true;  // > FixedRelations.fixed:7
      }  // > FixedRelations.fixed:8
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="ODES") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;

    __odeSelf._getOdeVars = function (){ return["x","vx","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = vx;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      __eventSolver.reinitialize(); // force synchronization: inefficient!
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        vx = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vx; // Rate for ODE: ODES:x
        _aRate[__cRate++] = ax; // Rate for ODE: ODES:vx
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        vx = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = vx;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vx(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new ohs1_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.tablePanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'tablePanel'
          _view.topPanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'topPanel'
          _view.slider2.linkProperty("Value",  function() { return k; }, function(_v) { k = _v; } ); // HtmlView Page linking property 'Value' for element 'slider2'
          _view.slider2.setAction("OnChange", function(_data,_info) {
  _initialize();
  t=0;

}); // HtmlView Page setting action 'OnChange' for element 'slider2'
          _view.slider22.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'slider22'
          _view.slider22.setAction("OnChange", function(_data,_info) {
  _initialize();
  t=0;

}); // HtmlView Page setting action 'OnChange' for element 'slider22'
          _view.middlePanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'middlePanel'
          _view.middlePanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'middlePanel'
          _view.leftPanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'leftPanel'
          _view.centerPanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'centerPanel'
          _view.centerPanel.linkProperty("Width",  function() { return centerWidth; }, function(_v) { centerWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'centerPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.x_axis.linkProperty("SizeX",  function() { return xmax-xmin; } ); // HtmlView Page linking property 'SizeX' for element 'x_axis'
          _view.y_axis.linkProperty("SizeY",  function() { return ymax-ymin; } ); // HtmlView Page linking property 'SizeY' for element 'y_axis'
          _view.p.linkProperty("SizeX",  function() { return 20*m; } ); // HtmlView Page linking property 'SizeX' for element 'p'
          _view.p.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'p'
          _view.p.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'p'
          _view.p.linkProperty("SizeY",  function() { return 20*m; } ); // HtmlView Page linking property 'SizeY' for element 'p'
          _view.p.setAction("OnDrag", function(_data,_info) {
  _initialize();
  t=0;
  vx=0;

}); // HtmlView Page setting action 'OnDrag' for element 'p'
          _view.spring.linkProperty("SizeX",  function() { return x+10; } ); // HtmlView Page linking property 'SizeX' for element 'spring'
          _view.spring.linkProperty("LineWidth",  function() { return k; }, function(_v) { k = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'spring'
          _view.px.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'px'
          _view.r.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'r'
          _view.r.linkProperty("Visibility",  function() { return view_r; }, function(_v) { view_r = _v; } ); // HtmlView Page linking property 'Visibility' for element 'r'
          _view.r.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'r'
          _view.vx.linkProperty("SizeX",  function() { return vx; }, function(_v) { vx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'vx'
          _view.vx.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'vx'
          _view.vx.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'vx'
          _view.vx.linkProperty("Visibility",  function() { return view_vx; }, function(_v) { view_vx = _v; } ); // HtmlView Page linking property 'Visibility' for element 'vx'
          _view.ax.linkProperty("SizeX",  function() { return 1.2*ax; } ); // HtmlView Page linking property 'SizeX' for element 'ax'
          _view.ax.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'ax'
          _view.ax.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'ax'
          _view.ax.linkProperty("Visibility",  function() { return view_ax; }, function(_v) { view_ax = _v; } ); // HtmlView Page linking property 'Visibility' for element 'ax'
          _view.text.linkProperty("X",  function() { return xmax-0.05*Lx; } ); // HtmlView Page linking property 'X' for element 'text'
          _view.text.linkProperty("Y",  function() { return ymin+0.05*Ly; } ); // HtmlView Page linking property 'Y' for element 'text'
          _view.text.linkProperty("Visibility",  function() { return view_end; }, function(_v) { view_end = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text'
          _view.rightPanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'rightPanel'
          _view.plottingPanel2.linkProperty("MinimumY",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("AutoScaleX",  function() { return t>50; } ); // HtmlView Page linking property 'AutoScaleX' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("MaximumY",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel2'
          _view.x2.linkProperty("Visibility",  function() { return view_x; }, function(_v) { view_x = _v; } ); // HtmlView Page linking property 'Visibility' for element 'x2'
          _view.px2.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'px2'
          _view.px2.linkProperty("Y",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'Y' for element 'px2'
          _view.px_trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'px_trail'
          _view.px_trail.linkProperty("InputY",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputY' for element 'px_trail'
          _view.vx2.linkProperty("Visibility",  function() { return view_vx; }, function(_v) { view_vx = _v; } ); // HtmlView Page linking property 'Visibility' for element 'vx2'
          _view.vx22.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'vx22'
          _view.vx22.linkProperty("Y",  function() { return vx; }, function(_v) { vx = _v; } ); // HtmlView Page linking property 'Y' for element 'vx22'
          _view.vx_trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'vx_trail'
          _view.vx_trail.linkProperty("InputY",  function() { return vx; }, function(_v) { vx = _v; } ); // HtmlView Page linking property 'InputY' for element 'vx_trail'
          _view.ax2.linkProperty("Visibility",  function() { return view_ax; }, function(_v) { view_ax = _v; } ); // HtmlView Page linking property 'Visibility' for element 'ax2'
          _view.ax22.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'ax22'
          _view.ax22.linkProperty("Y",  function() { return ax; }, function(_v) { ax = _v; } ); // HtmlView Page linking property 'Y' for element 'ax22'
          _view.ax_trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'ax_trail'
          _view.ax_trail.linkProperty("InputY",  function() { return ax; }, function(_v) { ax = _v; } ); // HtmlView Page linking property 'InputY' for element 'ax_trail'
          _view.kin.linkProperty("Visibility",  function() { return view_Kin; }, function(_v) { view_Kin = _v; } ); // HtmlView Page linking property 'Visibility' for element 'kin'
          _view.k_trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'k_trail'
          _view.k_trail.linkProperty("InputY",  function() { return Kin; }, function(_v) { Kin = _v; } ); // HtmlView Page linking property 'InputY' for element 'k_trail'
          _view.pot.linkProperty("Visibility",  function() { return view_Pot; }, function(_v) { view_Pot = _v; } ); // HtmlView Page linking property 'Visibility' for element 'pot'
          _view.p_trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'p_trail'
          _view.p_trail.linkProperty("InputY",  function() { return Pot; }, function(_v) { Pot = _v; } ); // HtmlView Page linking property 'InputY' for element 'p_trail'
          _view.tot.linkProperty("Visibility",  function() { return view_Tot; }, function(_v) { view_Tot = _v; } ); // HtmlView Page linking property 'Visibility' for element 'tot'
          _view.E_trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'E_trail'
          _view.E_trail.linkProperty("InputY",  function() { return Tot; }, function(_v) { Tot = _v; } ); // HtmlView Page linking property 'InputY' for element 'E_trail'
          _view.bottomPanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'bottomPanel'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.initButton.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'initButton'
          _view.button.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'button'
          _view.timeField.linkProperty("Value",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'Value' for element 'timeField'
          _view.v0.linkProperty("Value",  function() { return v0; }, function(_v) { v0 = _v; } ); // HtmlView Page linking property 'Value' for element 'v0'
          _view.v0.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'v0'
          _view.view_x.linkProperty("Checked",  function() { return view_x; }, function(_v) { view_x = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_x'
          _view.view_vx.linkProperty("Checked",  function() { return view_vx; }, function(_v) { view_vx = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_vx'
          _view.view_ax.linkProperty("Checked",  function() { return view_ax; }, function(_v) { view_ax = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_ax'
          _view.view_Kin.linkProperty("Checked",  function() { return view_Kin; }, function(_v) { view_Kin = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_Kin'
          _view.view_Pot.linkProperty("Checked",  function() { return view_Pot; }, function(_v) { view_Pot = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_Pot'
          _view.view_Tot.linkProperty("Checked",  function() { return view_Tot; }, function(_v) { view_Tot = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_Tot'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(200);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function ohs1_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = ohs1_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Introdu√ß√£o','./ohs1_Intro_1.html');

  return _view;
} // end of main function

function ohs1_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"titlePanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'titlePanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"borderLabel", _view.titlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'borderLabel'
      .setProperty("Text","<h2>Oscilador harm√¥nico simples</h2> ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'borderLabel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"simPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'simPanel'
      .setProperty("CSS",{"page-break-inside":"avoid", "display":"block", "margin-left":"auto", "margin-right":"auto", "margin-top":"0", "margin-bottom":"0"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'simPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"tablePanel", _view.simPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tablePanel'
      .setProperty("CSS",{"display":"table", "table-layout":"auto", "margin-left":"auto", "margin-right":"auto", "border":"none", "padding":"0px", "vertical-align": "top" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'tablePanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view.tablePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topPanel'
      .setProperty("CSS",{"display":"table-row", "vertical-align": "center", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topCell1", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topCell1'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topCell1'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topCell2", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topCell2'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topCell2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider2", _view.topCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider2'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'slider2'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider2'
      .setProperty("CSS",{"width":"80%"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'slider2'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider2'
      .setProperty("Background","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider2'
      .setProperty("Font","normal normal 11px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'slider2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topCell3", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topCell3'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topCell3'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider22", _view.topCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'slider22'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'slider22'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider22'
      .setProperty("CSS",{"width":"80%"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'slider22'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider22'
      .setProperty("Background","rgba(192,192,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider22'
      .setProperty("Font","normal normal 11px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'slider22'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"middlePanel", _view.tablePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'middlePanel'
      .setProperty("CSS",{"display":"table-row", "vertical-align": "middle", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'middlePanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"leftPanel", _view.middlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'leftPanel'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "center", "width":"50px", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'leftPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"centerPanel", _view.middlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'centerPanel'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "center", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'centerPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.centerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"x_axis", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'x_axis'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'x_axis'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'x_axis'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'x_axis'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'x_axis'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"y_axis", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'y_axis'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y_axis'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'y_axis'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y_axis'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'y_axis'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"p", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'p'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'p'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'p'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'p'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'p'
      ;

    _view._addElement(EJSS_DRAWING2D.spring,"spring", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'spring'
      .setProperty("Radius",1) // EJsS HtmlView.HtmlView Page: setting property 'Radius' for element 'spring'
      .setProperty("Solenoid",0.05) // EJsS HtmlView.HtmlView Page: setting property 'Solenoid' for element 'spring'
      .setProperty("X",-10) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'spring'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'spring'
      .setProperty("PointsPerLoop",20) // EJsS HtmlView.HtmlView Page: setting property 'PointsPerLoop' for element 'spring'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'spring'
      .setProperty("Loops",10) // EJsS HtmlView.HtmlView Page: setting property 'Loops' for element 'spring'
      .setProperty("ThinExtremes",true) // EJsS HtmlView.HtmlView Page: setting property 'ThinExtremes' for element 'spring'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"px", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'px'
      .setProperty("FillColor","rgba(64,128,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'px'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'px'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'px'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'px'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'px'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"r", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'r'
      .setProperty("LineColor","rgba(0,128,0,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'r'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'r'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'r'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'r'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"vx", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vx'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'vx'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vx'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'vx'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vx'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"ax", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ax'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'ax'
      .setProperty("LineColor","rgba(64,128,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ax'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ax'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'ax'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      .setProperty("RelativePosition","SOUTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text'
      .setProperty("Text","fim da simula√ß√£o") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text'
      .setProperty("Font","normal normal 11px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'text'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"rightPanel", _view.middlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rightPanel'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "center", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'rightPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel2", _view.rightPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel2'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel2'
      .setProperty("TitleY","") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel2'
      .setProperty("TitleX","t(s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel2'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel2'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel2'
      .setProperty("MaximumX",50) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"x2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'x2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"px2", _view.x2) // EJsS HtmlView.HtmlView Page: declaration of element 'px2'
      .setProperty("FillColor","rgba(64,128,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'px2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'px2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'px2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'px2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"px_trail", _view.x2) // EJsS HtmlView.HtmlView Page: declaration of element 'px_trail'
      .setProperty("Maximum",100000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'px_trail'
      .setProperty("Skip",10) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 'px_trail'
      .setProperty("LineColor","rgba(64,128,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'px_trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'px_trail'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"vx2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'vx2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"vx22", _view.vx2) // EJsS HtmlView.HtmlView Page: declaration of element 'vx22'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vx22'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vx22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'vx22'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'vx22'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"vx_trail", _view.vx2) // EJsS HtmlView.HtmlView Page: declaration of element 'vx_trail'
      .setProperty("Maximum",100000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'vx_trail'
      .setProperty("Skip",10) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 'vx_trail'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vx_trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'vx_trail'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"ax2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'ax2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ax22", _view.ax2) // EJsS HtmlView.HtmlView Page: declaration of element 'ax22'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ax22'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ax22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'ax22'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ax22'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"ax_trail", _view.ax2) // EJsS HtmlView.HtmlView Page: declaration of element 'ax_trail'
      .setProperty("Maximum",100000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'ax_trail'
      .setProperty("Skip",10) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 'ax_trail'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ax_trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'ax_trail'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"kin", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'kin'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"k_trail", _view.kin) // EJsS HtmlView.HtmlView Page: declaration of element 'k_trail'
      .setProperty("Maximum",1000000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'k_trail'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'k_trail'
      .setProperty("Skip",10) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 'k_trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'k_trail'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"pot", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'pot'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"p_trail", _view.pot) // EJsS HtmlView.HtmlView Page: declaration of element 'p_trail'
      .setProperty("Maximum",1000000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'p_trail'
      .setProperty("Skip",10) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 'p_trail'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'p_trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'p_trail'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"tot", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'tot'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"E_trail", _view.tot) // EJsS HtmlView.HtmlView Page: declaration of element 'E_trail'
      .setProperty("Maximum",1000000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'E_trail'
      .setProperty("Skip",10) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 'E_trail'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'E_trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'E_trail'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"y0", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'y0'
      .setProperty("SizeX",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y0'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'y0'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y0'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomPanel", _view.tablePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomPanel'
      .setProperty("CSS",{"display":"table-row", "vertical-align": "center", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomCell1", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomCell1'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomCell1'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomCell2", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomCell2'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "center", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomCell2'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("Tooltip","Inic/Para") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initButton", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'initButton'
      .setProperty("Tooltip","In√≠cio") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepback.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'initButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"button", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'button'
      .setProperty("ImageUrl","./figs/images.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'button'
      .setProperty("Text","step") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'button'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"timeLabel", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'timeLabel'
      .setProperty("Text","Tempo:") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'timeLabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"timeField", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'timeField'
      .setProperty("Width","50px") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'timeField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'timeField'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'timeField'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"v0", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'v0'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'v0'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomCell3", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomCell3'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomCell3'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_x", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_x'
      .setProperty("Text","x") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_x'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_vx", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_vx'
      .setProperty("Text","vx") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_vx'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_ax", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_ax'
      .setProperty("Text","ax") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_ax'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_Kin", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_Kin'
      .setProperty("Text","C") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_Kin'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_Pot", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_Pot'
      .setProperty("Text","P") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_Pot'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_Tot", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_Tot'
      .setProperty("Text","E") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_Tot'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"textPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'textPanel'
      .setProperty("Html","<h2>Sistema Massa Mola - Oscilador Harm√¥nico simples</h2> <p>Observe o O.H.S.</p> <ul>   <li>Visualise  a coordenadas x posi√ß√£o, velociadade e acelera√ß√£o.</li>   <li>Observe a rela√ß√£o entre x e ax</li>   <li>Identifique ao per√≠odo do movimento</li>   <li>Indentifique a amplitude do movimento nas duas figuras</li>    <li>Calcule a frequ√™ncia angular</li>   <li>Modifique a posi√ß√£o da barra de arrastar da esquerda e repita os procedimentos anteriores? </li>   <li>O que variou quando voc√™ modificou a posi√ß√£o dessa barra de arrastar?</li>   <li>Modifique a posi√ß√£o da barra de arrastar da direita e repita os procedimentos anteriores? </li>   <li>O que variou quando voc√™ modificou a posi√ß√£o dessa barra de arrastar?</li> </ul>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'textPanel'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Oscilador Harm√¥nico Simples<br />
     <img alt="Logo" src="figs/ohs1_pic.png" />
      </p>
      <p>
      <img alt="author image" src="figs/HAC_logo.png" />
 Humberto Carmona
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2020, Humberto Carmona, H. Carmona. Compiled with EJS 6.01 (201013)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new ohs1("_topFrame","library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
